<?php

include_once('eatlas_map_field.constants.inc');

/******************************************************************
 * Module configuration
 ******************************************************************/

/**
 * Implements: hook_menu().
 * Module configuration
 */
function eatlas_map_field_menu() {
	$items = array();

	// List all map configurations
	$items['admin/config/eatlas/eatlas_map_field'] = array(
		'title' => 'Map Configurations',
		'description' => 'List all eAtlas map field map configurations',
		'page callback' => '_eatlas_map_field_admin_overview',
		'access arguments' => array('access administration pages'),
		'file' => 'eatlas_map_field.admin.inc',
	);
	// Edit one map configuration
	$items['admin/config/eatlas/eatlas_map_field/%/edit'] = array(
		'title callback' => '_eatlas_map_field_admin_edit_title',
		'title arguments' => array(4),
		'description' => 'Edit eAtlas map field map configuration settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eatlas_map_field_admin', 4),
		'access arguments' => array('access administration pages'),
		'file' => 'eatlas_map_field.admin.inc',
	);
	// Create a new map configuration
	$items['admin/config/eatlas/eatlas_map_field/create'] = array(
		'title' => 'Create new map configuration',
		'description' => 'Create eAtlas map field map configuration setting',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eatlas_map_field_admin'),
		'access arguments' => array('access administration pages'),
		'file' => 'eatlas_map_field.admin.inc',
	);

	return $items;
}

/**
 * Follow the convention of node_load.
 * https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load/7
 * @param $map_config_id
 * @return stdClass
 */
function eatlas_map_field_load_map_config($map_config_id) {
	if ($map_config_id === NULL) {
		return new stdClass();
	}

	// try to load map configuration from database
	$data = db_select(EATLAS_MAP_FIELD_DB_TABLE_MAP_CONFIG, 'map_conf')
		->fields('map_conf')
		->condition('map_conf.mid', $map_config_id, '=')
		->execute()
		->fetch();

	// if no map configuration was found, return empty result
	if (!$data) {
		return new stdClass();
	}

	return $data;
}

/**
 * Follow the convention of node_save.
 * https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_save/7
 * @param $map_config
 * @throws Exception
 */
function eatlas_map_field_save_map_config($map_config) {
	// Transform the $map_config object into an array to be sent to the DB.
	$map_config_fields = (array) $map_config;
	$insert = TRUE;

	// check if map config already exists
	if ($map_config_fields && isset($map_config_fields['mid'])) {
		$existing_map_config = eatlas_map_field_load_map_config($map_config_fields['mid']);
		if (property_exists($existing_map_config, 'mid')) {
			// mid is used in the "WHERE" clause, not in the values.
			$mid = $map_config_fields['mid'];
			unset($map_config_fields['mid']);

			// Update
			$insert = FALSE;
			db_update(EATLAS_MAP_FIELD_DB_TABLE_MAP_CONFIG)
				->fields($map_config_fields)
				->condition('mid', $mid)
				->execute();

		}
	}

	if ($insert) {
		db_insert(EATLAS_MAP_FIELD_DB_TABLE_MAP_CONFIG)
			->fields($map_config_fields)
			->execute();
	}
}


/******************************************************************
 * Field definition
 ******************************************************************/



/******************************************************************
 * Field info
 ******************************************************************/

/**
 * Implements hook_field_info().
 */
function eatlas_map_field_field_info() {
	return array(
		'eatlas_map_field' => array(
			'label' => t('Map Field'),
			'description' => t('Indicates roughly the spatial location of this node'),
			'default_widget' => 'eatlas_map_field_editable_map',
			'default_formatter' => 'eatlas_map_field_image_formatter'
		)
	);
}

/**
 * Implements hook_field_validate().
 */
function eatlas_map_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	foreach ($items as $delta => $item) {
		if (!empty($item['geo_json'])) {
			json_decode($item['geo_json']);
			if (json_last_error() !== JSON_ERROR_NONE) {
				$errors[$field['field_name']][$langcode][$delta][] = array(
					'error' => 'eatlas_map_field_invalid',
					'message' => t('Not valid JSON'),
				);
			}
		}
	}
}

/**
 * Implements hook_field_is_empty().
 */
function eatlas_map_field_field_is_empty($item, $field) {
	return empty($item['geo_json']) && empty($item['image_blob']);
}

/******************************************************************
 * Field formatter
 ******************************************************************/

/**
 * Implements hook_field_formatter_info().
 */
function eatlas_map_field_field_formatter_info() {
	return array(
		// This formatter just returns the GeoJSON
		'eatlas_map_field_geo_json_formatter' => array(
			'label' => t('Simple GeoJSON formatter'),
			'field types' => array('eatlas_map_field')
		),
		'eatlas_map_field_openlayer_formatter' => array(
			'label' => t('Openlayer formatter'),
			'field types' => array('eatlas_map_field')
		),
		'eatlas_map_field_image_formatter' => array(
			'label' => t('Image formatter'),
			'field types' => array('eatlas_map_field')
		)
	);
}

/**
 * Implements hook_field_formatter_view().
 */
function eatlas_map_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();

	switch ($display['type']) {
		// This formatter just returns the GeoJSON
		case 'eatlas_map_field_geo_json_formatter':
			foreach ($items as $delta => $item) {
				$element[$delta] = array(
					'#type' => 'html_tag',
					'#tag' => 'p',
					'#value' => $item['geo_json'],
				);
			}
			break;
		case 'eatlas_map_field_openlayer_formatter':
			foreach ($items as $delta => $item) {
				$element[$delta] = array(
					'#type' => 'html_tag',
					'#tag' => 'div',
					'#value' => '', // setting the value is needed otherwise drupal screws up the DOM hierarchy`
					'#attributes' => array(
						'data-map-field-geo-json' => $item['geo_json'],
						'data-map-configuration' => json_encode(eatlas_map_field_load_map_config($item['mid'])),
						'class' => array('eatlas_map_field_map')
					),
					'#attached' => array(
						'js' => array(
							'sites/all/libraries/openlayers/ol.js',
							drupal_get_path('module', 'eatlas_map_field') . '/js/eatlas_map_field_ol_view.js'
						),
						'css' => array(drupal_get_path('module', 'eatlas_map_field') . '/css/eatlas_map_field_view.css')
					)
				);
			}
			break;
		case 'eatlas_map_field_image_formatter':
			foreach ($items as $delta => $item) {
				$element[$delta] = array (
					'#type' => 'html_tag',
					'#tag' => 'image',
					'#attributes' => array(
						'src' => $item['image_blob']
					),
					'#attached' => array(
						'css' => array(drupal_get_path('module', 'eatlas_map_field') . '/css/eatlas_map_field_view.css')
					)
				);
			}
			break;
	}

	return $element;
}

/******************************************************************
 * Field form widget
 ******************************************************************/

/**
 * Implements hook_field_widget_info().
 */
function eatlas_map_field_field_widget_info() {
	return array(
		'eatlas_map_field_text' => array(
			'label' => t('Map-data as GeoJSON'),
			'field types' => array('eatlas_map_field')
		),
		'eatlas_map_field_editable_map' => array(
			'label' => t('Editable map'),
			'field types' => array('eatlas_map_field')
		)
	);
}

/**
 * Implements hook_field_widget_form().
 */
function eatlas_map_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	$geo_json_value = isset($items[$delta]['geo_json']) ? $items[$delta]['geo_json'] : '';
	$image_blob_value = isset($items[$delta]['image_blob']) ? $items[$delta]['image_blob'] : '';
	$mid_value = isset($items[$delta]['mid']) ? $items[$delta]['mid'] : NULL;

	$geo_json_widget = array();
	$geo_json_widget['#delta'] = $delta;

	$mid_widget = array();
	$mid_widget['#delta'] = $delta;

	$image_blob_widget = array();
	$image_blob_widget['#delta'] = $delta;

	switch ($instance['widget']['type']) {
		case 'eatlas_map_field_editable_map':
			$geo_json_widget += array(
				'#suffix' => '<div id="eatlas-map-field-map" class="not-editable" tabindex="1000"></div>',
				'#attached' => array(
					'js' => array(
						'sites/all/libraries/openlayers/ol.js',
						drupal_get_path('module', 'eatlas_map_field') . '/js/eatlas_map_field_edit.js'
					),
					'css' => array(
						'sites/all/libraries/openlayers/ol.css',
						drupal_get_path('module', 'eatlas_map_field') . '/css/eatlas_map_field_edit.css'
					)
				)
			);
			// DELIBERATE fall-through: the editable map needs the the text area to send the data as GeoJSON to the server
		case 'eatlas_map_field_text':
			$geo_json_widget += array(
				'#type' => 'textarea',
				'#attributes' => array('class' => array('edit-map-field-textarea-geo-json')),
				'#default_value' => $geo_json_value,
				'#size' => 40,
				'#maxLength' => 65535
			);

			$map_configurations = db_select(EATLAS_MAP_FIELD_DB_TABLE_MAP_CONFIG, 'map_conf')
				->fields('map_conf')
				->orderBy('name')
				->execute()
				->fetchAll();
			$map_configuration_options = array();
			foreach ($map_configurations as $map_configuration) {
				$map_configuration_options[$map_configuration->mid] = $map_configuration->name;
			}

			$mid_widget += array(
				'#field_prefix' => '<div class="edit-map-field-select-map-conf-wrapper ol-unselectable ol-control">',
				'#type' => 'select',
				'#field_suffix' => '</div>',
				'#attributes' => array(
					'class' => array('edit-map-field-select-map-conf'),
					'data-map-configurations' => json_encode($map_configurations)
				),
				'#default_value' => $mid_value,
				'#options' => $map_configuration_options
			);
			$image_blob_widget += array(
				'#type' => 'textarea',
				'#attributes' => array('class' => array('edit-map-field-textarea-image-blob')),
				'#default_value' => $image_blob_value
			);
			break;
	}

	$element['geo_json'] = $geo_json_widget;
	$element['mid'] = $mid_widget;
	$element['image_blob'] = $image_blob_widget;
	return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function eatlas_map_field_field_widget_error($element, $error, $form, &$form_state) {
	switch ($error['error']) {
		case 'eatlas_map_field_invalid':
			form_error($element, $error['message']);
			break;
	}
}

